name: List and Deploy PR Changed Files

on:
  pull_request:
    types: [closed]
    branches:
      - develop

jobs:
  list-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Get PR number and check changed files
        id: check
        env:
          GH_TOKEN: ${{ secrets.JEGANMERGE }}  # Set the GitHub token for gh authentication
        run: |
          # Get PR number from the event
          pr_number=${{ github.event.pull_request.number }}
          # Use GitHub CLI to fetch details of the PR and list changed files
          changed_files=$(gh pr view $pr_number --json files --jq '.files[].path')
          # Convert the list of changed files into a single line (space-separated)
          changed_files_single_line=$(echo "$changed_files" | tr '\n' ' ')
          # Save the changed files in the environment variable
          echo "changed_files=$changed_files_single_line" >> $GITHUB_ENV
          # Output the list of changed files for logging
          echo "Changed files:"
          echo "$changed_files_single_line"

  deploy:
    runs-on: ubuntu-latest
    needs: list-files

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get changed files from previous step
        id: get_changed_files
        run: |
          # Access the environment variable set in GITHUB_ENV
          changed_files="${{ env.changed_files }}"
          echo "Changed files: $changed_files"
          echo "$changed_files" > changed_files.txt

      - name: Deploy Changed Files to GCP VM
        if: success() && env.changed_files != ''  # Ensure there are changed files
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_GCP }}
          REMOTE_USER: ${{ secrets.REMOTE_USER_GCP }}  # Your GCP VM user
          REMOTE_HOST: ${{ secrets.REMOTE_HOST_GCP }}  # GCP VM External IP
          GIT_PATH: "/home/jegan/git-rsync-en"
          DEPLOY_PATH: "/home/jegan/www_profitokrs_com_6_4_1"
          BACKUP_PATH: "/home/jegan/profit-site-en-backup"
        run: |
          # Create an SSH directory and load the private key from the secret
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add the host to known_hosts to prevent connection issues
          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

          changed_files="${{ env.changed_files }}"
          files=($changed_files)
          DATE=$(date +%F-%H-%M)
          echo "Number of Files = ${#files[@]}"
          echo " "
          for file in "${files[@]}"; do
              echo "Connecting to $REMOTE_HOST"
              
              # Backup if the file exists on the remote server
              if ssh -i ~/.ssh/id_rsa $REMOTE_USER@$REMOTE_HOST "[ -f '$DEPLOY_PATH/$file' ]"; then
                  echo "Backing up $DEPLOY_PATH/$file"
                  ssh -i ~/.ssh/id_rsa $REMOTE_USER@$REMOTE_HOST "sudo cp -r '$DEPLOY_PATH/$file' '$BACKUP_PATH/$file-bak-$DATE'"
              else
                  echo "File does not exist remotely."
              fi

              # Deploy the new file to the remote server
              echo "Deploying $file to $REMOTE_HOST"
              scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$GIT_PATH/$file" "$REMOTE_USER@$REMOTE_HOST:$DEPLOY_PATH/$file"

              # Set ownership and permissions on the remote server
              ssh -i ~/.ssh/id_rsa $REMOTE_USER@$REMOTE_HOST "sudo chown -R www-data: '$DEPLOY_PATH/$file'; sudo chmod 640 '$DEPLOY_PATH/$file'"
              echo "$file deployed successfully"
          done
